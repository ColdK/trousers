
/*
 * Licensed Materials - Property of IBM
 *
 * trousers - An open source TCG Software Stack
 *
 * (C) Copyright International Business Machines Corp. 2007
 *
 */

#ifndef _TCS_API_H_
#define _TCS_API_H_

struct tcs_api_table {
	TSS_RESULT (*OpenContext)(TSS_HCONTEXT, BYTE *, int);
	TSS_RESULT (*GetRegisteredKeyByPublicInfo)(TSS_HCONTEXT, TCPA_ALGORITHM_ID, UINT32, BYTE *,
						   UINT32 *, BYTE **);
	TSS_RESULT (*CloseContext)(TSS_HCONTEXT);
	TSS_RESULT (*FreeMemory)(TSS_HCONTEXT, BYTE *);
	TSS_RESULT (*LogPcrEvent)(TSS_HCONTEXT, TSS_PCR_EVENT, UINT32 *);
	TSS_RESULT (*GetPcrEvent)(TSS_HCONTEXT, UINT32, UINT32 *, TSS_PCR_EVENT **);
	TSS_RESULT (*GetPcrEventsByPcr)(TSS_HCONTEXT, UINT32, UINT32, UINT32 *, TSS_PCR_EVENT **);
	TSS_RESULT (*GetPcrEventLog)(TSS_HCONTEXT, UINT32 *, TSS_PCR_EVENT **);
	TSS_RESULT (*RegisterKey)(TSS_HCONTEXT, TSS_UUID, TSS_UUID, UINT32, BYTE *, UINT32, BYTE *);
	TSS_RESULT (*UnregisterKey)(TSS_HCONTEXT, TSS_UUID);
	TSS_RESULT (*EnumRegisteredKeys)(TSS_HCONTEXT, TSS_UUID *, UINT32 *, TSS_KM_KEYINFO **);
	TSS_RESULT (*EnumRegisteredKeys2)(TSS_HCONTEXT, TSS_UUID *, UINT32 *, TSS_KM_KEYINFO2 **);
	TSS_RESULT (*GetRegisteredKey)(TSS_HCONTEXT, TSS_UUID KeyUUID, TSS_KM_KEYINFO **);
	TSS_RESULT (*GetRegisteredKeyBlob)(TSS_HCONTEXT, TSS_UUID, UINT32 *, BYTE **);
	TSS_RESULT (*LoadKeyByBlob)(TSS_HCONTEXT, TCS_KEY_HANDLE, UINT32, BYTE *, TPM_AUTH *,
				    TCS_KEY_HANDLE *, TCS_KEY_HANDLE *);
	TSS_RESULT (*LoadKeyByUUID)(TSS_HCONTEXT, TSS_UUID, TCS_LOADKEY_INFO *, TCS_KEY_HANDLE *);
	TSS_RESULT (*EvictKey)(TSS_HCONTEXT, TCS_KEY_HANDLE);
	TSS_RESULT (*CreateWrapKey)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_ENCAUTH, TCPA_ENCAUTH,
				    UINT32, BYTE *, UINT32 *, BYTE **, TPM_AUTH *);
	TSS_RESULT (*GetPubKey)(TSS_HCONTEXT, TCS_KEY_HANDLE, TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*MakeIdentity)(TSS_HCONTEXT, TCPA_ENCAUTH, TCPA_CHOSENID_HASH, UINT32, BYTE *,
				   TPM_AUTH *, TPM_AUTH *, UINT32 *, BYTE **, UINT32 *, BYTE **,
				   UINT32 *, BYTE **, UINT32 *, BYTE **, UINT32 *, BYTE **);
	TSS_RESULT (*GetCredential)(TSS_HCONTEXT, UINT32, UINT32, UINT32 *, BYTE **);
	TSS_RESULT (*SetOwnerInstall)(TSS_HCONTEXT, TSS_BOOL);
	TSS_RESULT (*TakeOwnership)(TSS_HCONTEXT, UINT16, UINT32, BYTE *, UINT32, BYTE *, UINT32,
				    BYTE *, TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*OIAP)(TSS_HCONTEXT, TCS_AUTHHANDLE *, TCPA_NONCE *);
	TSS_RESULT (*OSAP)(TSS_HCONTEXT, TCPA_ENTITY_TYPE, UINT32, TCPA_NONCE, TCS_AUTHHANDLE *,
			   TCPA_NONCE *, TCPA_NONCE *);
	TSS_RESULT (*ChangeAuth)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_PROTOCOL_ID, TCPA_ENCAUTH,
				 TCPA_ENTITY_TYPE, UINT32, BYTE *, TPM_AUTH *, TPM_AUTH *, UINT32 *,
				 BYTE **);
	TSS_RESULT (*ChangeAuthOwner)(TSS_HCONTEXT, TCPA_PROTOCOL_ID, TCPA_ENCAUTH,
				      TCPA_ENTITY_TYPE, TPM_AUTH *);
	TSS_RESULT (*ChangeAuthAsymStart)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_NONCE, UINT32, BYTE *,
					  TPM_AUTH *, UINT32 *, BYTE **, UINT32 *, BYTE **,
					  UINT32 *, BYTE **, TCS_KEY_HANDLE *);
	TSS_RESULT (*ChangeAuthAsymFinish)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCS_KEY_HANDLE,
					   TCPA_ENTITY_TYPE, TCPA_HMAC, UINT32, BYTE *, UINT32,
					   BYTE *, TPM_AUTH *, UINT32 *, BYTE **, TPM_NONCE *,
					   TCPA_DIGEST *);
	TSS_RESULT (*TerminateHandle)(TSS_HCONTEXT, TCS_AUTHHANDLE);
	TSS_RESULT (*ActivateTPMIdentity)(TSS_HCONTEXT, TCS_KEY_HANDLE, UINT32, BYTE *, TPM_AUTH *,
					  TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*Extend)(TSS_HCONTEXT, TCPA_PCRINDEX, TCPA_DIGEST, TCPA_PCRVALUE *);
	TSS_RESULT (*PcrRead)(TSS_HCONTEXT, TCPA_PCRINDEX, TCPA_PCRVALUE *);
	TSS_RESULT (*PcrReset)(TSS_HCONTEXT, UINT32, BYTE *);
	TSS_RESULT (*Quote)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_NONCE, UINT32, BYTE *, TPM_AUTH *,
			    UINT32 *, BYTE **, UINT32 *, BYTE **);
	TSS_RESULT (*DirWriteAuth)(TSS_HCONTEXT, TCPA_DIRINDEX, TCPA_DIRVALUE, TPM_AUTH *);
	TSS_RESULT (*DirRead)(TSS_HCONTEXT, TCPA_DIRINDEX, TCPA_DIRVALUE *);
	TSS_RESULT (*Seal)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_ENCAUTH, UINT32, BYTE *, UINT32,
			   BYTE *, TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*Sealx)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_ENCAUTH, UINT32, BYTE *, UINT32,
			    BYTE *, TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*Unseal)(TSS_HCONTEXT, TCS_KEY_HANDLE, UINT32, BYTE *, TPM_AUTH *, TPM_AUTH *,
			     UINT32 *, BYTE **);
	TSS_RESULT (*UnBind)(TSS_HCONTEXT, TCS_KEY_HANDLE, UINT32, BYTE *, TPM_AUTH *, UINT32 *,
			     BYTE **);
	TSS_RESULT (*CreateMigrationBlob)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_MIGRATE_SCHEME,
					  UINT32, BYTE *, UINT32, BYTE *, TPM_AUTH *, TPM_AUTH *,
					  UINT32 *, BYTE **, UINT32 *, BYTE **);
	TSS_RESULT (*ConvertMigrationBlob)(TSS_HCONTEXT, TCS_KEY_HANDLE, UINT32, BYTE *, UINT32,
					   BYTE *, TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*AuthorizeMigrationKey)(TSS_HCONTEXT, TCPA_MIGRATE_SCHEME, UINT32, BYTE *,
					    TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*CertifyKey)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCS_KEY_HANDLE, TCPA_NONCE,
				 TPM_AUTH *, TPM_AUTH *, UINT32 *, BYTE **, UINT32 *, BYTE **);
	TSS_RESULT (*Sign)(TSS_HCONTEXT, TCS_KEY_HANDLE, UINT32, BYTE *, TPM_AUTH *, UINT32 *,
			   BYTE **);
	TSS_RESULT (*GetRandom)(TSS_HCONTEXT, UINT32, BYTE **);
	TSS_RESULT (*StirRandom)(TSS_HCONTEXT, UINT32, BYTE *);
	TSS_RESULT (*GetTPMCapability)(TSS_HCONTEXT, TCPA_CAPABILITY_AREA, UINT32, BYTE *, UINT32 *,
				       BYTE **);
	TSS_RESULT (*SetCapability)(TSS_HCONTEXT, TCPA_CAPABILITY_AREA, UINT32, BYTE *, UINT32,
				    BYTE *, TPM_AUTH *);
	TSS_RESULT (*GetCapability)(TSS_HCONTEXT, TCPA_CAPABILITY_AREA, UINT32, BYTE *, UINT32 *,
				    BYTE **);
	TSS_RESULT (*GetCapabilitySigned)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_NONCE,
					  TCPA_CAPABILITY_AREA, UINT32, BYTE *, TPM_AUTH *,
					  TCPA_VERSION *, UINT32 *, BYTE **, UINT32 *, BYTE **);
	TSS_RESULT (*GetCapabilityOwner)(TSS_HCONTEXT, TPM_AUTH *, TCPA_VERSION *, UINT32 *,
					 UINT32 *);
	TSS_RESULT (*CreateEndorsementKeyPair)(TSS_HCONTEXT, TCPA_NONCE, UINT32, BYTE *, UINT32 *,
					       BYTE **, TCPA_DIGEST *);
	TSS_RESULT (*ReadPubek)(TSS_HCONTEXT, TCPA_NONCE, UINT32 *, BYTE **, TCPA_DIGEST *);
	TSS_RESULT (*DisablePubekRead)(TSS_HCONTEXT, TPM_AUTH *);
	TSS_RESULT (*OwnerReadPubek)(TSS_HCONTEXT, TPM_AUTH *, UINT32 *, BYTE **);
	TSS_RESULT (*SelfTestFull)(TSS_HCONTEXT);
	TSS_RESULT (*CertifySelfTest)(TSS_HCONTEXT, TCS_KEY_HANDLE, TCPA_NONCE, TPM_AUTH *,
				      UINT32 *, BYTE **);
	TSS_RESULT (*GetTestResult)(TSS_HCONTEXT, UINT32 *, BYTE **);
	TSS_RESULT (*OwnerSetDisable)(TSS_HCONTEXT, TSS_BOOL, TPM_AUTH *);
	TSS_RESULT (*ResetLockValue)(TSS_HCONTEXT, TPM_AUTH *);
	TSS_RESULT (*OwnerClear)(TSS_HCONTEXT, TPM_AUTH *);
	TSS_RESULT (*DisableOwnerClear)(TSS_HCONTEXT, TPM_AUTH *);
	TSS_RESULT (*ForceClear)(TSS_HCONTEXT);
	TSS_RESULT (*DisableForceClear)(TSS_HCONTEXT);
	TSS_RESULT (*PhysicalDisable)(TSS_HCONTEXT);
	TSS_RESULT (*PhysicalEnable)(TSS_HCONTEXT);
	TSS_RESULT (*PhysicalSetDeactivated)(TSS_HCONTEXT, TSS_BOOL);
	TSS_RESULT (*PhysicalPresence)(TSS_HCONTEXT, TCPA_PHYSICAL_PRESENCE);
	TSS_RESULT (*SetTempDeactivated)(TSS_HCONTEXT);
	TSS_RESULT (*SetTempDeactivated2)(TSS_HCONTEXT, TPM_AUTH *);
	TSS_RESULT (*FieldUpgrade)(TSS_HCONTEXT, UINT32, BYTE *, UINT32 *, BYTE **, TPM_AUTH *);
	TSS_RESULT (*SetRedirection)(TSS_HCONTEXT, TCS_KEY_HANDLE, UINT32, UINT32, TPM_AUTH *);
	TSS_RESULT (*CreateMaintenanceArchive)(TSS_HCONTEXT, TSS_BOOL, TPM_AUTH *, UINT32 *,
					       BYTE **, UINT32 *, BYTE **);
	TSS_RESULT (*LoadMaintenanceArchive)(TSS_HCONTEXT, UINT32, BYTE *, TPM_AUTH *, UINT32 *,
					     BYTE **);
	TSS_RESULT (*KillMaintenanceFeature)(TSS_HCONTEXT, TPM_AUTH *);
	TSS_RESULT (*LoadManuMaintPub)(TSS_HCONTEXT, TCPA_NONCE, UINT32, BYTE *, TCPA_DIGEST *);
	TSS_RESULT (*ReadManuMaintPub)(TSS_HCONTEXT, TCPA_NONCE, TCPA_DIGEST *);
	TSS_RESULT (*DaaJoin)(TSS_HCONTEXT, TPM_HANDLE, BYTE, UINT32, BYTE*, UINT32, BYTE*,
			      TPM_AUTH*, UINT32*, BYTE**);
	TSS_RESULT (*DaaSign)(TSS_HCONTEXT, TPM_HANDLE, BYTE, UINT32, BYTE*, UINT32, BYTE*,
			      TPM_AUTH*, UINT32*, BYTE**);
	TSS_RESULT (*ReadCounter)(TSS_HCONTEXT, TSS_COUNTER_ID, TPM_COUNTER_VALUE*);
	TSS_RESULT (*CreateCounter)(TSS_HCONTEXT, UINT32, BYTE*, TPM_ENCAUTH, TPM_AUTH*,
				    TSS_COUNTER_ID*, TPM_COUNTER_VALUE*);
	TSS_RESULT (*IncrementCounter)(TSS_HCONTEXT, TSS_COUNTER_ID, TPM_AUTH*, TPM_COUNTER_VALUE*);
	TSS_RESULT (*ReleaseCounter)(TSS_HCONTEXT, TSS_COUNTER_ID, TPM_AUTH*);
	TSS_RESULT (*ReleaseCounterOwner)(TSS_HCONTEXT, TSS_COUNTER_ID, TPM_AUTH*);
	TSS_RESULT (*ReadCurrentTicks)(TSS_HCONTEXT, UINT32*, BYTE**);
	TSS_RESULT (*TickStampBlob)(TSS_HCONTEXT, TCS_KEY_HANDLE, TPM_NONCE*, TPM_DIGEST*,
				    TPM_AUTH*, UINT32*, BYTE**,UINT32*, BYTE**);
	TSS_RESULT (*EstablishTransport)(TSS_HCONTEXT, UINT32, TCS_KEY_HANDLE, UINT32, BYTE*,
					 UINT32, BYTE*, TPM_AUTH*, TPM_MODIFIER_INDICATOR*,
					 TCS_HANDLE*, UINT32*, BYTE**, TPM_NONCE*);
	TSS_RESULT (*ExecuteTransport)(TSS_HCONTEXT, TPM_COMMAND_CODE, UINT32, BYTE*, UINT32*,
				       TCS_HANDLE**, TPM_AUTH*, TPM_AUTH*, TPM_AUTH*, UINT64*,
				       TPM_MODIFIER_INDICATOR*, TPM_RESULT*, UINT32*, BYTE**);
	TSS_RESULT (*ReleaseTransportSigned)(TSS_HCONTEXT, TCS_KEY_HANDLE, TPM_NONCE*, TPM_AUTH*,
					     TPM_AUTH*, TPM_MODIFIER_INDICATOR*, UINT32*, BYTE**,
					     UINT32*, BYTE**);
	TSS_RESULT (*NV_DefineOrReleaseSpace)(TSS_HCONTEXT, UINT32, BYTE*, TCPA_ENCAUTH, TPM_AUTH*);
	TSS_RESULT (*NV_WriteValue)(TSS_HCONTEXT, TSS_NV_INDEX, UINT32, UINT32, BYTE*, TPM_AUTH*);
	TSS_RESULT (*NV_WriteValueAuth)(TSS_HCONTEXT, TSS_NV_INDEX, UINT32, UINT32, BYTE*,
					TPM_AUTH*);
	TSS_RESULT (*NV_ReadValue)(TSS_HCONTEXT, TSS_NV_INDEX, UINT32, UINT32*, TPM_AUTH*, BYTE**);
	TSS_RESULT (*NV_ReadValueAuth)(TSS_HCONTEXT, TSS_NV_INDEX, UINT32, UINT32*, TPM_AUTH*,
				       BYTE**);
	TSS_RESULT (*SetOrdinalAuditStatus)(TSS_HCONTEXT, TPM_AUTH *, UINT32, TSS_BOOL);
	TSS_RESULT (*GetAuditDigest)(TSS_HCONTEXT, UINT32, TPM_DIGEST *, UINT32 *, BYTE **,
				     TSS_BOOL *, UINT32 *, UINT32 **);
	TSS_RESULT (*GetAuditDigestSigned)(TSS_HCONTEXT, TCS_KEY_HANDLE, TSS_BOOL, TPM_NONCE,
					   TPM_AUTH *, UINT32 *, BYTE **, TPM_DIGEST *,
					   TPM_DIGEST *, UINT32 *, BYTE **);
	TSS_RESULT (*SetOperatorAuth)(TSS_HCONTEXT, TPM_SECRET *);
	TSS_RESULT (*OwnerReadInternalPub)(TSS_HCONTEXT, TCS_KEY_HANDLE, TPM_AUTH*, UINT32*,
					   BYTE**);
};

#endif
