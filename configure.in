#
# configure.in for the trousers project
#

AC_INIT(trousers, 0.2.0, trousers-tech@lists.sf.net)
# compute $target
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(1.6.3)

# Debugging support
AC_ARG_ENABLE(debug,
		AC_HELP_STRING([--enable-debug], [turn on all trousers debugging flags [default is off]]),
		[enable_debug="yes"
		 AC_MSG_RESULT([*** Enabling debugging at user request ***])],)

# If the user has not set CFLAGS, do something appropriate
test_CFLAGS=${CFLAGS+set}
if test "$test_CFLAGS" != set; then
	if test "x$enable_debug" == "xyes"; then
		CFLAGS="-O0 -g -DTSS_DEBUG"
#		CFLAGS="-O0 -g -DTSS_DEBUG -DTCSD_SINGLE_THREAD_DEBUG"
	else
		CFLAGS="-O2"
	fi
fi

# Arch specific stuff
case $target in
        *ppc64* | *powerpc64*)
		CFLAGS="$CFLAGS -m64"
		;;
        *x86_64*)
		CFLAGS="$CFLAGS -m32"
		;;
        *)
                ;;
esac

# Non-standard OpenSSL (for 64bit platforms)
AC_MSG_CHECKING([Non-standard OpenSSL])
AC_ARG_WITH(openssl,
	[--with-openssl=PATH      Location of openssl libs/includes],
  	[OPENSSL_INCLUDE_DIR="$withval/include"
	 OPENSSL_LIB_DIR="$withval/lib"
	 if [[ ! -d $OPENSSL_INCLUDE_DIR -o ! -d $OPENSSL_LIB_DIR ]]; then
		AC_MSG_ERROR([$OPENSSL_INCLUDE_DIR or $OPENSSL_LIB_DIR doen't exist!])
	 else
		AC_MSG_RESULT([yes])
		CFLAGS="$CFLAGS -L$OPENSSL_LIB_DIR -I$OPENSSL_INCLUDE_DIR"
		AC_SUBST([OPENSSL_LIB_DIR])
	 fi],
	[AC_MSG_RESULT([no])
	 AC_SUBST([OPENSSL_LIB_DIR], []) ] )

# The tspi Makefile will look for trspi/crypto/@CRYPTO_PACKAGE@/crypto.c
# Future crypto packages can go in their own subdir of trspi/crypto
# and a check for them should be made here
AC_CHECK_LIB([crypto], [EVP_DigestUpdate],
		[CRYPTO_PACKAGE='openssl'],
		[AC_MSG_ERROR([openssl is currently the only supported crypto library for trousers. Please install openssl from http://www.openssl.org or the -devel package from your distro])])
AC_SUBST([CRYPTO_PACKAGE])

NO_GTK=0

DEFAULT_SSH_ASKPASS_EXE=/usr/lib/ssh/ssh-askpass
AC_ARG_WITH(askpass,
	    [  --with-askpass          Path to the ssh-askpass executable],
	    [AC_MSG_RESULT([*** Enabling ssh-askpass at user request ***])
	     SSH_ASKPASS_EXE=${withval}
	     NO_GTK=1],)

AC_ARG_ENABLE(ssh-askpass,
		[AC_HELP_STRING([--enable-ssh-askpass], [use the ssh-askpass popup dialogs [default=off]])],
		[AC_MSG_RESULT([*** Enabling ssh-askpass at user request ***])
		 NO_GTK=1],)

AC_ARG_ENABLE(gcov,
		[AC_HELP_STRING([--enable-gcov], [turn on gcov code coverage flags [default=off]])],
		[CFLAGS="$CFLAGS -ftest-coverage -fprofile-arcs"
		 AC_MSG_RESULT([*** Enabling gcov at user request ***])],)

# profiling support
AC_ARG_ENABLE(gprof,
		[AC_HELP_STRING([--enable-gprof], [enable profiling with gprof [default=off]])],
		[CFLAGS="$CFLAGS -pg"
		 AC_MSG_RESULT([*** Enabling profiling at user request ***])],)

#
# if askpass wasn't specified directly, check for GTK libs.
#
if test $NO_GTK -eq 0; then
	# section imported from Glade compile
	pkg_modules="gtk+-2.0 >= 2.0.0"
	PKG_CHECK_MODULES(GTK,
			  [$pkg_modules],
			  AM_CONDITIONAL(HAVE_GTK, true),
			  NO_GTK=1)
	#AC_SUBST(GTK_CFLAGS)
	#AC_SUBST(GTK_LIBS)

	#GETTEXT_PACKAGE=trousers
	#AC_SUBST(GETTEXT_PACKAGE)
	#AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE")

	dnl Add the languages which your application supports here.
	#ALL_LINGUAS=""
	#AM_GLIB_GNU_GETTEXT

	# end Glade section
fi

#
# if askpass was specified directly or GTK wasn't found, check for askpass
#
if test $NO_GTK -eq 1; then

	if [[ "x${SSH_ASKPASS_EXE}" == "x" ]]; then
		AC_PATH_PROG(SSH_ASKPASS_EXE, [ssh-askpass],
			     [${DEFAULT_SSH_ASKPASS_EXE}],
			     [$PATH:/usr/lib/ssh:/usr/lib/openssh:/usr/libexec/ssh:/usr/libexec/openssh])
	fi

	if [[ ! -x ${SSH_ASKPASS_EXE} ]]; then
		AC_MSG_ERROR([*** ${SSH_ASKPASS_EXE} is not an executable. Please configure --with-askpass=/full/path ***])
	fi
	AC_MSG_RESULT([*** using askpath executable: ${SSH_ASKPASS_EXE} ***])
	AM_CONDITIONAL(HAVE_GTK, false)
fi

AC_DISABLE_STATIC
AC_PROG_CC
AC_PROG_LIBTOOL

AC_SUBST(TCSD_DEFAULT_PORT, 30003)


CFLAGS="$CFLAGS -I../include -W -Wall -Wno-unused-parameter -DTCSD_DEFAULT_PORT=${TCSD_DEFAULT_PORT}"
#CFLAGS="$CFLAGS -I../include -std=c99 -pedantic -W -Wall"
KERNEL_VERSION=`uname -r`
AC_SUBST(CFLAGS)

# When we build the rpms, prefix will be /usr. This'll do some things that make sense,
# like put our sbin stuff in /usr/sbin and our library in /usr/lib. It'll do some other
# things that don't make sense like put our config file in /usr/etc. So, I'll just hack
# it here. If the --prefix option isn't specified during configure, let it all go to
# /usr/local, even /usr/local/etc. :-P
if test x"${prefix}" == x"/usr"; then
	sysconfdir="/etc"
	localstatedir="/var"
	mandir="/usr/share/man"
elif test x"${prefix}" == x"NONE"; then
	localstatedir="/usr/local/var"
fi

if [[ $NO_GTK -eq 1 ]]; then
	CFLAGS="$CFLAGS -DSSH_ASKPASS_EXE=\\\"${SSH_ASKPASS_EXE}\\\""
fi

AC_OUTPUT(dist/tcsd.conf \
	  dist/trousers.spec \
	  Makefile \
	  src/Makefile \
	  src/include/Makefile \
	  src/tcs/Makefile \
	  src/tddl/Makefile \
	  src/tspi/Makefile \
	  src/trspi/Makefile \
	  src/tcsd/Makefile \
	  tools/Makefile \
	  man/man8/tcsd.8 \
	  dist/Makefile \
	  man/Makefile \
	  man/man3/Makefile \
	  man/man8/Makefile)

echo "CFLAGS=$CFLAGS"

