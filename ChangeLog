
 - fixed error return code check to socket() syscall clntside.c:52.
 - added comment about TDDL reries and added log statement when a
   physical presence command is denied because of runlevel.
 - Fixed Tspi_Hash_VerifySignature to check signatures based on the
   signature scheme of the key in use. Also, crypto.c was changed
   to do a verify based on TSS_HASH_OTHER.
 - Added 2 new highlevel Unbind testcases to test PKCS1.5 vs OAEP.
 - In Tspi_Context_LoadKeyByUUID, the uninitialized keyBlob variable
   was causing an invalid free on exit. Corrected that.
 - changed return value from internal error to invalid handle when a
   bad object handle is passed to Tspi_Hash_Sign and the Tspi_Data
   functions.
 - added Tspi_TPM_CertifySelfTest functionality
 - corrected iptables string in the tcsd manpage.
 - Corrected return code in Tspi_Key_UnloadKey02.c testcase.
 - enabled Tspi_TPM_GetTestResult functionality
 - added selftest as an option to the list of remote ops for the access
   control
 - added compatibility with openssh-askpass for the popup dialog box.
   Now either gtk2-devel OR openssh-askpass must be installed to build
   trousers. Using openssh-askpass reduces the size of libtspi.so by
   about 40K and reduces the number of dependencies from 26 to 6!
 - Bugfixes
   - The entityType field was being passed between the TCSD and
   TSP as a UINT32 instead of UINT16. This was keeping Tspi_ChangeAuth
   from working as advertised.
   - Secrets were being hashed incorrectly when secret mode was PLAIN
   and the secret data length was 0. Now, when secret mode is plain, the
   passed in data is always hashed, even if its 0 length.
   - Popups are hopefully being handled more correctly now. Previously
   the dialog popped up at the time SetSecret was called, but now its
   just when the secret is actually needed.
   - sf.net Bug #118026: memory allocations and free's fixed in almost
   all paths from app to tcstp.c wrt correctly returning calloc_tspi'd
   memory vs. malloc'd memory. Only problem remaining is the PCR event
   functions, which have dangling malloc'd references, which is an
   architectural problem which should be solved in the 1.2 rewrite.

* TROUSERS_0_1_9

 - added tcsd manpage
 - added access control functionality so that sets of ordinals
   cannot be executed by non-local hosts. This is now a
   configurable option in tcsd.conf as "remote_ops".
 - Set Physical Presence now works from the TSP when the TCSD
   detects that it is running in single user mode. When not
   running in single user mode, the TCS_PhysicalPresence
   command returns TSS_E_NOTIMPL.
 - Changed an fprintf to LogError in gtk/support.c
 - TCP/IP server-side fixes in svrside.c
 - various compile warnings fixed
 - moved commonly used utility functions to trspi/trousers.c and
   exported these functions in the header file tss/trousers.h.
 - added new testcases for ChangeAuth of the TPM owner and SRK in
   tcg/highlevel/tspi.
 - added test tcg/highlevel/tpm/Tspi_TPM_PcrRead04.c
 - updated Tspi_TPM_GetCapability manpage.
 - added code to detect a 1.2 TPM and get auth sessions the 1.2 way.
 - added manpage for Tspi_TPM_GetPubEndorsementKey
 - Bugfixes
    - in crypto.c, encrypted data area should be RSA_size(rsa) bytes
    large, not always 256. This was keeping non-2048 bit keys from
    working with the TPM keyring app.
    - Fixed detection of an already closed Tddl.
    - Allow validating the entire TCPA_PUBKEY structure in
    Tspi_TPM_GetPubEndorsementKey, as National chips do this.
    - Added support for TSS_TPMCAP_ORD and TSS_TPMCAP_FLAG in
    Tspi_TPM_GetCapability, which required a call to
    TCSP_GetCapabilityOwner to fetch the TPM's internal flags. Added
    tcg/highlevel/tpm/Tspi_TPM_GetCapability0{4,5}.c to test.
    - When loading the SRK from TCS PS, the TCS key handle should now
    be 0x40000000 (TSS_SRK_KEY_HANDLE). There were checks for this in
    the ChangeAuth code paths, which caused failing of various sorts.
    - Bug fixed in roll over of TCS key handle generation. Previously we
    would have smashed the SRK's fixed value and we would have thought
    there were 2 SRK's loaded.
    - sf.net bug #1154611, old SRK was not being removed from mem cache,
    though disk cache was being deleted. This means that after re-taking
    ownership the mem cache was corrupted until a restart of the TCSD.
 - Feature Requests
    - sf.net RFE #1122608 completed. Several different device locations
    are now supported by default.  If /dev/tpm is created its assumed that
    the IBM Research device driver is being used and therefore ioctl's are
    sent to the driver, all others get read/write's. Updated README.

* TROUSERS_0_1_8

 - added a manpage for Tspi_TPM_PcrExtend
 - added SHA1_HASH_SIZE #define tied to openssl/sha.h
 - Corrected typo in tcpa_types.h of pValdationData -> pValidationData
 - updated README with info on device file stuff
 - added a usage function and long options to tcsd
 - added an error message when incorrect params are passed to tcsd on
   the command line.
 - added -lcrypto and -lpthread to the build of libtspi.so, so that app
   writers will avoid having to include those when they don't have to.
 - Connected up Tspi_TPM_SetStatus and Tspi_TPM_SelfTestFull to
   TCSP_SetTempDeactivated, TCSP_SelfTestFull, TCSP_SetOwnerInstall,
   TCSP_OwnerSetDisable and TCSP_PhysicalDisable.
 - Bugfixes
   - tcsem.c:507, error in calculating number of PCR events to copy out.
   - sf.net bug #1151183 fixed. Tspi_TPM_GetPubEndorsementKey now takes
   the correct number of params, and all testcases/TSS calls are changed.
   - sf.net bug #1113313 fixed. Tspi_TPM_TakeOwnership now allows a NULL
   pub endorsement key handle and a testcase,
   tcg/highlevel/tpm/Tspi_TPM_TakeOwnership03.c, exists to test this.
   - In Tspi_SetAttribData, set the TCPA_KEY's privkey, not the wrapper
   object on a TSS_TSPATTRIB_KEYBLOB_PRIVATE_KEY.

* TROUSERS_0_1_7

 - Fixed the logging up so that if tcsd -f is specified, all logs go the
   foreground, else all logs go to syslog.
 - Moved the TPM_IOCTL #define into the tddl.h file. Now, if you're
   using the IBM research device driver, compiling with #define TPM_IOCTL
   will use ioctl's to open /dev/tpm and #undef TPM_IOCTL will use
   read/write calls to /dev/tpm0.
 - Revert accidental change in tddl.c
 - Lots of 0's replaced with non-magic #define's in the TSP code
 - In spi_getset.c: removed unimportant debugging stmts; make
   Tspi_{Get|Set}AttribData set the correct public and private key data
   when asked to.
 - Lots of manpage verbage changes.
 - added new manpages for: Tspi_TPM_TakeOwnership, Tspi_Key_LoadKey,
   Tspi_Context_Create and Tspi_TPM_ClearOwner.
 - Bugfixes
   - cxt.c: when destroying a context object, release the tcs_ctx_lock before
     calling ctx_ref_count_keys(). This prevents a deadlock.
   - added a mutex unlock call for an error path that would have caused a
     deadlock

* TROUSERS_0_1_6

 - Logging functionality changes only, for bug #1106301
   - TCSD:
     - Logs now go to stdout/stderr until a successful startup
     - After a successful startup, cmdline args are parsed
     - if -f is specified, logging continues to stdout/stderr and daemon runs
       in the foreground, killable by ctrl-c.
     - If -f is not specified, logs go to syslog and the tcsd forks into the
       background
   - TSP library
     - If compiled w/o debugging, there is no logging of any kind
     - If compiled w/ debugging, all logs go to stdout/stderr, unless the
       environment variable TSS_DEBUG_OFF is set, then, there is no logging of
       any kind
 - There is no longer a --enable-stderrlog option to the configure script

* TROUSERS_0_1_5

 - Complete memory management overhaul. calloc_tspi is now used to clean up
   memory allocated by Tspi functions. TCS blob functions have been changed
   to not require a context, since there's no need w/o calloc_tspi. Its
   now necessary to call free explicitly everywhere in the TCS. In the TSP,
   calloc_tspi is now always called with the TSP context of the session, which
   would will ensure all memory allocated by the session is accounted for.
 - Unused #defines and variables removed from spi_utils.h
 - Commented out code removed throughout the source.
 - Removed log.o on a 'make clean'.
 - commented out unnecessary logging, added more descriptive logging
 - renamed variables named 'hContext' to specifiy whether they represent TSP
   of TCS context handles.
 - got rid of a few magic numbers
 - Bugfixes
   - in tcs/cache.c, getNextTimeStamp() was unlocking the mutex twice.
   - removed destroy_key_refs() in TSP, which caused double free errors
   - added call to event_log_final() in tcsd_shutdown() to clean up the event log
   - added an intermediate copy stage of data in getTCSDPacket() to avoid
   memcpy() calls with overlapping source and dest fields.

* TROUSERS_0_1_4

 - added ChangeLog :-)
 - TSP object management overhaul. All API's should be correct for contexts
    whether they're connected to a TCS or not.
 - testsuite changes based on object mgmt overhaul
 - various internal fixes and simplifications of the code due to object mgmt
    overhaul

* TROUSERS_0_1_3

 - added helpful message when package gtk2-devel is not found in configure.in
 - chown changes in dist/Makefile for new syntax
 - added detailed flags to various manpages
 - TSP memory management overhaul
 - added more complete destroy_key_refs() function
 - Bugfixes
    - quashed memory leaks in TSP found by valgrind
    - return TRUE/FALSE from getAttribData
    - added TSS_TSPATTRIB_KEYINFO_SIZE to Tspi_GetAttribData
    - call free() not Tspi_Context_FreeMemory() in spi_utils.c

* TROUSERS_0_1_2

 - added bug report mailing list to configure.in
 - added --enable-stderrlog feature to configure.in
 - Marked Tspi_TPM_GetCapabilitySigned as not implemented (per TSS v1.1b spec)
 - Bugfixes
    - Removed common.h from Tspi_Context_RegisterKey manpage
    - added endianess macros to spi_utils.h
    - made all endianess fixes to the TSP and testsuite
    - logging improvements tcspbg.c
    - tcs_utils.c compile time warning quashed

* TROUSERS_0_1_1

 - Updated design doc
 - Updated README
 - More sensible function naming (no addNewObject, just addObject)
 - Bugfixes
    - return data correctly in Tspi_GetAttribData
    - malloc space for returned UUID correctly in tspps.c
    - log errors in tddl.c
    - follow a failure path in auth_mgr.c
    - don't always return success in req_mgr.c

* TROUSERS_0_1_0

 - Initial code drop
